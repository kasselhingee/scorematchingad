% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/buildsmdtape.R, R/manifoldtransform.R,
%   R/tapell.R, R/tapesmo.R
\name{buildsmdtape}
\alias{buildsmdtape}
\alias{manifoldtransform}
\alias{tapell}
\alias{tapesmd}
\title{Build CppAD Tapes for Score Matching}
\usage{
buildsmdtape(
  start,
  tran,
  end,
  ll,
  ytape,
  usertheta,
  bdryw = "ones",
  acut = 1,
  thetatape_creator = function(n) {
     seq(length.out = n)
 },
  verbose = FALSE
)

manifoldtransform(start, tran = "identity", end = start)

tapell(
  ll,
  ytape,
  usertheta,
  tranobj,
  thetatape_creator = function(n) {
     seq(length.out = n)
 },
  verbose = FALSE,
  ...
)

tapesmd(lltape, tranobj, man, bdryw, acut = 1, verbose = FALSE)
}
\arguments{
\item{start}{The starting manifold. Used for checking that \code{tran} and \code{man} match.}

\item{tran}{The name of a transformation. Available transformations are
\itemize{
\item ``srqt''
\item ``alr''
\item ``clr''
\item \verb{none'' (or }identity'')
}}

\item{end}{The name of the manifold that \code{tran} maps \code{start} to. Available manifolds are:
\itemize{
\item ``sph'' unit sphere
\item ``Hn111'' hyperplane normal to the vector \eqn{1, 1, 1, 1, ...}
\item ``sim'' simplex
\item ``Euc'' Euclidean space
}}

\item{ll}{The name of an inbuilt improper log-likelihood function to tape (which also specifies the parametric model family) or \verb{C++} code for a custom log-likehood function. The \verb{C++} code has special requirements, similar to \code{TMB::compile()} - see 'Taping a Custom Log-Likelihood Function' below.}

\item{ytape}{An example measurement value to use for creating the tapes. In the natural (i.e. \code{start}) manifold of the log-likelihood function. \code{ytape} will be converted to the \code{end} manifold according to the \code{toM()} method for \code{tranobj} before taping.
Please ensure that \code{ytape} is the interior of the manifold, and it is probably best if all components of \code{tranobj$toM(ytape)} are non-zero.}

\item{usertheta}{A vector of parameter elements for the likelihood function. \code{NA} elements will become \emph{dynamic parameters}. Other elements will be fixed at the provided value. The length of \code{usertheta} must be the correct length for the log-likelihood - \strong{no checking is conducted}.}

\item{bdryw}{The name of the boundary weight function. "ones" for manifolds without boundary. For the simplex and positive orthant of the sphere, "prodsq" and "minsq" are possible - see \code{\link[=ppi]{ppi()}} for more information on these.}

\item{acut}{A parameter passed to the boundary weight function \code{bdryw}. Ignored for \code{bdryw = "ones"}.}

\item{thetatape_creator}{A function that accepts an integer \code{n}, and returns a vector of \code{n} length. The function is used to fill in the \code{NA} elements of \code{usertheta} when building the tapes. Please ensure that the values filled by \code{thetatape_creator} lead to plausible parameter vectors for the chosen log-likelihood.}

\item{verbose}{If \code{TRUE} more details are printed when taping. These details are for debugging and will likely be comprehensible only to users familiar with the source code of this package.}

\item{tranobj}{A transform object (of type \code{Rcpp_transform_ad}), typically created by \code{\link[=manifoldtransform]{manifoldtransform()}}.}

\item{...}{Options passed to \code{\link[Rcpp:cppFunction]{Rcpp::cppFunction()}} for compiling a custom log-likelihood.}

\item{lltape}{Tape of the log-likelihood function constructed using \code{\link[=tapell]{tapell()}}.}

\item{man}{A transform object (of type \code{Rcpp_man_ad}) matching \code{tranobj}, and typically created by \code{\link[=manifoldtransform]{manifoldtransform()}}.}
}
\value{
\code{buildsmdtape()} returns a list of:
\itemize{
\item an \code{\link{ADFun}} object containing a tape of an improper likelihood with \eqn{z} on the \code{end} manifold as the independent variable
\item an \code{\link{ADFun}} object containing a tape of the score matching discrepancy function with the non-fixed parameters as the independent variable, and the measurements on the \code{end} manifold as the dynamic parameter.
\item some information about the tapes
}

\code{manifoldtransform()} returns a named list with:
\itemize{
\item \code{tran} A object of type \code{Rcpp_transform_ad} representing the transform
\item \code{man} A object of type \code{Rcpp_man_ad} representing the end manifold
}

\code{tapell()} returns an \code{\link{ADFun}} object with two additional attributes accessed via \code{attr()}:
\itemize{
\item \code{ytape} The value of \code{ytape}
\item \code{tran} The name of the transform specified in \code{tranobj}.
}

\code{tapesmd()} returns an \code{\link{ADFun}} object.
}
\description{
For a parametric model family, the function \code{buildsmdtape()} generates \code{CppAD} tapes (called \code{ADFun}s) for the improper log-likelihood (without normalising constant) of the family and the score matching discrepancy function \eqn{A(z) + B(z) + C(z)} (defined in \code{\link{scorematchingtheory}}).
Three steps are performed by \code{buildsmdtape()}: first an object that specifies the manifold and any transformation to another manifold is created using \code{\link[=manifoldtransform]{manifoldtransform()}}; then a tape of the log-likelihood (without normalising constant) is created using \code{\link[=tapell]{tapell()}}; finally a tape of \eqn{A(z) + B(z) + C(z)} is created using \code{\link[=tapesmd]{tapesmd()}}.
}
\details{
The improper log-likelihood (without normalising constant) must be implemented in \verb{C++} and is selected by name. Similarly the transforms of the manifold must be implemented in \verb{C++} and selected by name.

When using, \code{CppAD} one first creates \emph{tapes} of functions. These tapes can then be used for evaluating the function and its derivatives, and generating further tapes through argument swapping, differentiation and composition.
The taping relies on specifying typical argument values for the functions (see \strong{Introduction to CppAD Tapes} below).
Tapes can have both \emph{independent} variables and \emph{dynamic} parameters.
The differentiation with \code{CppAD} occurs with respect to the independent variables.
Tapes of tapes are possible, including tapes that swap the independent and dynamic variables - this is how this package differentiates with respect to a dynamic variables (see \code{\link[=tapeSwap]{tapeSwap()}}).

To build a tape for the score matching discrepancy function, the package first tapes the map from a point \eqn{z} on the \code{end} manifold to the value of the improper log-likelihood, where the independent variable is the \eqn{z}, the dynamic parameter is a vector of the parameters to estimate, and the remaining model parameters are fixed and not estimated.
This tape is then used to generate a tape for the score matching discrepancy function where the parameters to estimate are the independent variable.

Only some combinations of \code{start}, \code{tran} and \code{end} are available because \code{tran} must map between \code{start} and \code{end}.
These combinations of \code{start}-\code{tran}-\code{end} are currently available:
\itemize{
\item sim-sqrt-sph
\item sim-identity-sim
\item sim-alr-Euc
\item sim-clr-Hn111
\item sph-identity-sph
}

Inbuilt log-likelihood functions (without normalising constants) are:
\itemize{
\item dirichlet
\item ppi
\item vMF
\item Bingham
\item FB
}
}
\section{Functions}{
\itemize{
\item \code{buildsmdtape()}: Combines
\code{\link[=manifoldtransform]{manifoldtransform()}}, \code{\link[=tapell]{tapell()}}, and \code{\link[=tapesmd]{tapesmd()}}.

\item \code{manifoldtransform()}: Build an object specifying the transformation from the natural domain of log-likelihood to another manifold.

\item \code{tapell()}: Creates a \code{CppAD} tape of an improper log-likelihood as a function of values on the \code{end} manifold in \code{tranobj}. The Jacobian of the associated transformation is used to convert the log-likelihood on the natural manifold \code{start} of the log-likelihood to the \code{end} manifold.
This conversion is needed to account for the change in measure between the manifolds.

\item \code{tapesmd()}: Generates a \code{CppAD} tape of the empirical score matching discrepancy function \eqn{A(z) + B(z) + C(z)} (\code{\link{scorematchingtheory}}). Requires a tape of an improper log-likelihood function and the corresponding manifold with the transformation.

}}
\section{Introduction to CppAD Tapes}{
This package uses version 2022000.2 of the algorithmic differentiation library \code{CppAD} \insertCite{bell2023cp}{scorematchingad} to build score matching estimators.
Full help for \code{CppAD} can be found at \url{https://cppad.readthedocs.io/}.

Differentiation proceeds by \emph{taping} the basic (\emph{atomic}) operations performed on the independent variables and dynamic parameters. The atomic operations include multiplication, division, addition, sine, cosine, exponential and many more.
Example values for the variables and parameters are used to conduct this taping, so care must be taken with any conditional (e.g. if-then) operations, and \code{CppAD} has \href{https://cppad.readthedocs.io/latest/CondExp.html}{special tools for this}.
The result of taping is an \href{https://cppad.readthedocs.io/latest/ADFun.html}{\code{ADFun}} object, often called a \emph{tape}.
This \code{ADFun} object can be evaluated, differentiated, used for further taping (see \href{https://cppad.readthedocs.io/latest/base2ad.html}{base2ad}), solving differential equations and more.
The differentiation is with respect to the independent variables, however the dynamic parameters can be altered which allows for creating a new \code{ADFun} object where the dynamic parameters become independent variables (see \code{\link[=tapeSwap]{tapeSwap()}}).
For the purposes of score matching, there are also \emph{fixed} parameters, which are the elements of the model's parameter vector that are given and not estimated.
}

\section{Warning: multiple CPU}{
Each time a tape is evaluated the corresponding \verb{C++} object is altered. Parallel use of the same \code{ADFun} object thus requires care and is not tested. For now I recommend creating a new \code{ADFun} object for each CPU.
}

\section{Taping a Custom Log-Likelihood Function}{
Much care is needed when creating a custom log-likelihood function by passing \verb{C++} code as \code{ll}.
The code must be \verb{C++} that uses only \code{CppAD} and \code{Eigen}, which makes it very similar to the requirements of the input to \code{TMB::compile()} (which also uses \code{CppAD} and \code{Eigen}).
The start of \code{code} should always be "\verb{a1type fname(const veca1 &x, const veca1 &theta)\{}" where \code{fname} is your chosen name of the log-likelihood function, \code{x} represents a point in the data space and \code{theta} is a vector of parameters for the log-likelihood. This specifies that the function will have two vector arguments (of type \code{veca1}) and will return a single numeric value (\code{a1type}).

The type \code{a1type} is a double with special ability for being taped by \code{CppAD}. The \code{veca1} type is a vector of \code{a1type} elements, with the vector wrapping supplied by the \code{Eigen} C++ package (that is an \code{Eigen} matrix with 1 column and dynamic number of rows).

The body of the function must use operations from Eigen and/or CppAD, prefixed by \verb{Eigen::} and \verb{CppAD::} respectively.
There are no easy instructions for writing these as it is genuine \verb{C++} code, which can be very opaque to those unfamiliar with \verb{C++}.
See the \href{https://eigen.tuxfamily.org/dox/group__QuickRefPage.html}{Eigen documentation} for quick reference to available operations from Eigen. Limited operations are available directly from \code{CppAD} without \code{Eigen}: \href{https://cppad.readthedocs.io/latest/unary_standard_math.html}{unary operations} and \href{https://cppad.readthedocs.io/latest/binary_math.html}{binary operations}.
For the purposes of score matching the operations should all be smooth to create a smooth log-likelihood and the normalising constant may be omitted.
The function \code{\link[Rcpp:cppFunction]{Rcpp::cppFunction()}} is used to compile the custom likelihood function.
Compilation can be very slow.

The custom log-likelihood should operate on the starting manifold corresponding to \code{tran}.
It is good practice to check that the taping is giving correct answers by applying \code{\link[=evaltape]{evaltape()}} to a few known situations.
}

\section{Warning}{
 There is limited checking of the inputs.
}

\examples{
p <- 3
u <- rep(1/sqrt(p), p)
ltheta <- p #length of vMF parameter vector
intheta <- rep(NA, length.out = ltheta)
tapes <- buildsmdtape("sph", "identity", "sph", "vMF",
              ytape = u,
              usertheta = intheta,
              "ones", verbose = FALSE
              )
evaltape(tapes$lltape, u, runif(n = ltheta))
evaltape(tapes$smdtape, runif(n = ltheta), u)

u <- rep(1/3, 3)
tapes <- buildsmdtape("sim", "sqrt", "sph", "ppi",
              ytape = u,
              usertheta = ppi_paramvec(p = 3),
              bdryw = "minsq", acut = 0.01,
              verbose = FALSE
              )
evaltape(tapes$lltape, u, rppi_egmodel(1)$theta)
evaltape(tapes$smdtape, rppi_egmodel(1)$theta, u)
manifoldtransform("sim", "alr", "Euc")
maninfo <- manifoldtransform("sim", "sqrt", "sph")
ppitape <- tapell(ll = "ppi",
                  ytape = c(0.2, 0.3, 0.5),
                  usertheta = ppi_paramvec(p = 3), 
                  tranobj = maninfo$tran) 
evaltape(ppitape, 
  sqrt(rep(1/3, 3)), 
  ppi_paramvec(p = 3, AL=0, bL=0, beta=c(0,0,0.5)))
evaltape(tapeJacobian(ppitape), 
  sqrt(rep(1/3, 3)), 
  ppi_paramvec(p = 3, AL=0, bL=0, beta=c(0,0,0.5)))

ll <- "a1type dirichlet(const veca1 &u, const veca1 &beta) {
  size_t d  = u.size();
  a1type y(0.);  // initialize summation at 0
  for(size_t i = 0; i < d; i++)
  {   y   += beta[i] * log(u[i]);
  }
  return y;
}"
dirichlettape <- tapell(ll, 
                        ytape = rep(1/3, 3), 
                        usertheta = rep(NA, 3),
                        tranobj = manifoldtransform("sim", "identity", "sim")$tran)
sqrtman <- manifoldtransform("sim", "sqrt", "sph")
ppitape <- tapell(ll = "ppi",
                  ytape = c(0.2, 0.3, 0.5),
                  usertheta = ppi_paramvec(p = 3), 
                  tranobj = sqrtman$tran)
ppismdtape <- tapesmd(lltape = ppitape,
                      tranobj = sqrtman$tran,
                      man = sqrtman$man,
                      bdryw = "minsq",
                      acut = 0.1,
                      verbose = FALSE)
evaltape(ppismdtape, 
  ppi_paramvec(p = 3, AL=0, bL=0, beta=c(-0.1,-0.1,0.5)),
  rep(1/3, 3)) 
}
\references{
\insertAllCited{}
}
\seealso{
Other tape builders: 
\code{\link{moretapebuilders}}
}
\concept{tape builders}
